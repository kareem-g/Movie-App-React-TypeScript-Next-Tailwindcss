import Head from "next/head";
import { Header } from "@/components/Header";
import Banner from "@/components/Banner";
import { requests, tvRequests } from "api";

import { GetServerSideProps } from "next";
import { Movie } from "types";
import { Row } from "@/components/Row";
import { motion } from "framer-motion";
import Modal from "@/components/Modal";
import { Suspense, useEffect, useState } from "react";
import { useStoreActions, useStoreState } from "easy-peasy";
import { useRouter } from "next/router";

interface Props {
  netflixOriginals: Movie[];
  trendingNow: Movie[];
  topRated: Movie[];
  actionMovies: Movie[];
  comedyMovies: Movie[];
  horrorMovies: Movie[];
  romanceMovies: Movie[];
  documentaries: Movie[];
  tvPopular: Movie[];
  // products: Product[]
}

export default function Home({
  netflixOriginals,
  actionMovies,
  comedyMovies,
  documentaries,
  horrorMovies,
  romanceMovies,
  topRated,
  trendingNow,
  tvPopular,
}: Props) {
  const [hydrated, setHydrated] = useState(false);
  const myList = useStoreState((state: any) =>
    state.myList.sort((a: any, b: any) => b.dateAdded - a.dateAdded)
  );
  const modalOpen = useStoreState((state: any) => state.modalOpen);
  const clearMyList = useStoreActions((actions: any) => actions.clearMyList);

  const [searchResults, setSearchResults] = useState<any>([]);
  const router = useRouter();

  const slug = router.query.search;

  useEffect(() => {
    const fetchSearchQuery = async () => {
      const movieSearchdata = await fetch(
        `https://api.themoviedb.org/3/search/multi?api_key=${process.env.NEXT_PUBLIC_TMDB_API_KEY}&language=en-US&query=${slug}&page=1&include_adult=false`
      ).then((res) => res.json());
      setSearchResults(movieSearchdata.results);
    };

    fetchSearchQuery();

    setHydrated(true);
  }, [slug]);

  const FilterMoviesAndSeries = (arr: any, media_type: any) => {
    if (slug !== "") {
      return arr.filter((obj: any) => obj.media_type !== media_type);
    } else {
      return;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true }}
    >
      <Head>
        <title>Home - Netflix</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      {/* Header */}
      <main className="relative pb-24 pl-4 lg:space-y-24 lg:pl-16">
        {slug ? (
          <main className="pl-4 pb-4 lg:space-y-24">
            <section className="md:space-y-16 pt-36 pb-4 mb-4">
              <Row
                isDetails={false}
                title={`Explore titles Related to: ${slug.toString()}`}
                movies={FilterMoviesAndSeries(searchResults, "person")}
                type="movie"
                isSearch={true}
              />
            </section>
          </main>
        ) : (
          <>
            {/* Banner */}
            <Banner netflixOriginals={topRated} />

            {/* <h1 className="flex min-h-screen flex-col items-center justify-center py-2">
                Netflix - Home
                 <button
                  onClick={() => {
                    clearMyList();
                  }}
                >
                  clear my list
                </button>
            
              </h1> */}

            <section className="md:space-y-16 pt-36 pb-4 mb-4">
              {/* Hydration Problem Solved by this check cause the component gets data from the LocalStorage and if Data not Ready yet it causes `4` Hydration Errors
              Time Spent Here: about 4 hours */}
              {myList.length > 0 && hydrated ? (
                <Row
                  isDetails={false}
                  title="My List"
                  movies={myList}
                  type=""
                />
              ) : null}

              <Row
                isDetails={false}
                title="Popular TV Shows"
                movies={tvPopular}
                type="tv"
              />

              <Row
                isDetails={false}
                title="Trending Now"
                movies={trendingNow}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Top Rated"
                movies={topRated}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Netflix Originals"
                movies={netflixOriginals}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Action Thrillers"
                movies={actionMovies}
                type="movie"
              />
              {/* My List */}
              {/* {list.length > 0 && <Row title="My List" movies={list} />} */}

              <Row
                isDetails={false}
                title="Comedies"
                movies={comedyMovies}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Scary Movies"
                movies={horrorMovies}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Romance Movies"
                movies={romanceMovies}
                type="movie"
              />
              <Row
                isDetails={false}
                title="Documentaries"
                movies={documentaries}
                type="movie"
              />
            </section>
          </>
        )}
      </main>
      {/* Modal */}
      {modalOpen && <Modal />}
    </motion.div>
  );
}
export const getServerSideProps: GetServerSideProps = async () => {
  const [
    netflixOriginals,
    trendingNow,
    topRated,
    actionMovies,
    comedyMovies,
    horrorMovies,
    romanceMovies,
    documentaries,
    tvPopular,
  ] = await Promise.all([
    fetch(requests.fetchNetflixOriginals).then((res) => res.json()),
    fetch(requests.fetchTrending).then((res) => res.json()),
    fetch(requests.fetchTopRated).then((res) => res.json()),
    fetch(requests.fetchActionMovies).then((res) => res.json()),
    fetch(requests.fetchComedyMovies).then((res) => res.json()),
    fetch(requests.fetchHorrorMovies).then((res) => res.json()),
    fetch(requests.fetchRomanceMovies).then((res) => res.json()),
    fetch(requests.fetchDocumentaries).then((res) => res.json()),
    fetch(tvRequests.fetchPopular).then((res) => res.json()),
  ]);

  return {
    props: {
      netflixOriginals: netflixOriginals.results,
      trendingNow: trendingNow.results,
      topRated: topRated.results,
      actionMovies: actionMovies.results,
      comedyMovies: comedyMovies.results,
      horrorMovies: horrorMovies.results,
      romanceMovies: romanceMovies.results,
      documentaries: documentaries.results,
      tvPopular: tvPopular.results,
    },
  };
};

// TODO: Fix Hydration Error - Fix Typescript does not return "Runtime" - Add Real Watch Page
